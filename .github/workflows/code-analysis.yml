name: Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run weekly on Sundays at 01:30 UTC

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'typescript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup Node.js
      if: matrix.language == 'typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    # App package setup
    - name: Generate app lock file
      if: matrix.language == 'typescript'
      working-directory: ./app
      run: |
        rm -f package-lock.json
        npm install --package-lock-only

    - name: Cache app dependencies
      if: matrix.language == 'typescript'
      uses: actions/cache@v4
      with:
        path: |
          app/node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-app-${{ hashFiles('app/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-app-

    - name: Install and build app
      if: matrix.language == 'typescript'
      working-directory: ./app
      run: |
        # Handle npm warnings with --no-audit flag and force resolution of latest versions
        npm ci --no-audit
        npm install --save-dev rimraf@latest
        npm install --save-dev glob@latest
        npm install --save-dev @eslint/config-array@latest @eslint/object-schema@latest
        npm install --save-dev eslint@latest
        
        # Run linting and type checking
        npm run typecheck
        npm run lint
        
        # Run unit tests
        npm run test:ci
        
        # Build the plugin
        npm run build
        
        # Verify plugin structure
        test -f dist/plugin.json || exit 1
        test -f dist/module.js || exit 1

    # Datasource package setup
    - name: Generate datasource lock file
      if: matrix.language == 'typescript'
      working-directory: ./datasource
      run: |
        rm -f package-lock.json
        npm install --package-lock-only

    - name: Cache datasource dependencies
      if: matrix.language == 'typescript'
      uses: actions/cache@v4
      with:
        path: |
          datasource/node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-datasource-${{ hashFiles('datasource/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-datasource-

    - name: Install and build datasource
      if: matrix.language == 'typescript'
      working-directory: ./datasource
      run: npm ci && npm run build

    - name: Build Go
      if: matrix.language == 'go'
      run: |
        cd datasource
        go build ./...

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  functionality-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze, vulnerability-check]
    
    services:
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Cache Playwright binaries
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-ms-playwright

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Build and prepare plugins
      run: |
        cd app
        npm ci
        npm run build
        cd ../datasource
        npm ci
        npm run build
        
    - name: Copy plugins to Grafana
      run: |
        docker cp app/dist/. grafana:/var/lib/grafana/plugins/platformbuilds-miradorstack-app/
        docker cp datasource/dist/. grafana:/var/lib/grafana/plugins/platformbuilds-miradorstack-datasource/
        docker restart grafana

    - name: Run E2E tests
      run: |
        cd app
        npm run e2e
        cd ../datasource
        npm run e2e

  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    env:
      DC_VERSION: 12.1.0
      DC_DATA_DIR: ~/.cache/dependency-check
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Go vulnerability scanning
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck on datasource
      run: |
        cd datasource
        govulncheck ./...

    # Node.js/TypeScript vulnerability scanning
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    # App vulnerability scanning setup
    - name: Generate app lock file
      working-directory: ./app
      run: |
        rm -f package-lock.json
        npm install --package-lock-only

    - name: Cache app dependencies for vulnerability check
      uses: actions/cache@v4
      with:
        path: |
          app/node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-app-vuln-${{ hashFiles('app/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-app-vuln-

    - name: Install app dependencies
      working-directory: ./app
      run: npm ci

    # Datasource vulnerability scanning setup
    - name: Generate datasource lock file
      working-directory: ./datasource
      run: |
        rm -f package-lock.json
        npm install --package-lock-only

    - name: Cache datasource dependencies for vulnerability check
      uses: actions/cache@v4
      with:
        path: |
          datasource/node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-datasource-vuln-${{ hashFiles('datasource/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-datasource-vuln-

    - name: Install datasource dependencies
      working-directory: ./datasource
      run: |
        # Handle npm warnings with --no-audit flag and force resolution of latest versions
        npm ci --no-audit
        npm install --save-dev rimraf@latest
        npm install --save-dev glob@latest
        npm install --save-dev @eslint/config-array@latest @eslint/object-schema@latest
        npm install --save-dev eslint@latest
        
        # Run linting and type checking
        npm run typecheck
        npm run lint
        
        # Run unit tests
        npm run test:ci
        
        # Build the plugin
        npm run build
        
        # Verify plugin structure
        test -f dist/plugin.json || exit 1
        test -f dist/module.js || exit 1
        
        # Run Go tests for datasource backend
        go test ./... -v

    - name: Run npm audit (app)
      run: |
        cd app
        npm audit --audit-level=high

    - name: Run npm audit (datasource)
      run: |
        cd datasource
        npm audit --audit-level=high

    # Additional TypeScript security scanning with OWASP Dependency-Check
    - name: Cache Dependency-Check installation
      id: cache-odc
      uses: actions/cache@v4
      with:
        path: dependency-check
        key: ${{ runner.os }}-dependency-check-${{ env.DC_VERSION }}

    - name: Download Dependency-Check
      if: steps.cache-odc.outputs.cache-hit != 'true'
      run: |
        wget "https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip"
        unzip dependency-check-${DC_VERSION}-release.zip
        rm dependency-check-${DC_VERSION}-release.zip

    - name: Cache Dependency-Check data
      uses: actions/cache@v4
      with:
        path: ${{ env.DC_DATA_DIR }}
        key: ${{ runner.os }}-dependency-check-data-${{ env.DC_VERSION }}
        restore-keys: |
          ${{ runner.os }}-dependency-check-data-

    - name: Run Dependency-Check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: |
        if [ -z "$NVD_API_KEY" ]; then
          echo "::error::NVD_API_KEY secret is not configured; unable to run dependency-check." >&2
          exit 1
        fi
        mkdir -p dependency-check-reports
        mkdir -p "$DC_DATA_DIR"
        ./dependency-check/bin/dependency-check.sh \
          --nvdApiKey "$NVD_API_KEY" \
          --data "$DC_DATA_DIR" \
          --disableOssIndex \
          --suppression dependency-check-suppressions.xml \
          --scan app --scan datasource \
          --format HTML --format JSON --prettyPrint \
          --failOnCVSS 7 \
          --out dependency-check-reports

    - name: Upload Dependency-Check reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-reports
        path: dependency-check-reports
