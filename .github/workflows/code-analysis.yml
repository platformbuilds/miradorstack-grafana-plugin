name: Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run weekly on Sundays at 01:30 UTC

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Align with Grafana plugin matrix: Node >= 22, npm >= 11.5.1
      - name: Setup Node.js (TS analysis)
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1 (TS analysis)
        if: matrix.language == 'typescript'
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Reproducible installs only (no lockfile regen, no @latest)
      - name: Install app deps
        if: matrix.language == 'typescript'
        working-directory: ./app
        run: npm ci

      - name: Install datasource deps
        if: matrix.language == 'typescript'
        working-directory: ./datasource
        run: npm ci

      # Keep CodeQL focused on source; no TS builds in this job
      - name: Build Go
        if: matrix.language == 'go'
        run: |
          cd datasource
          go build ./...

  functionality-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze]
    
    services:
      grafana:
        image: grafana/grafana:12.2.0   # Grafana >= 12.2.0 per matrix
        ports:
          - 3000:3000
        env:
          # Use the correct env var and plugin IDs to allow unsigned plugins in CI
          GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "miradorstack-miradorexplorer-app,miradorstack-miradorcoreconnector-datasource"
          # Maximize plugin logging to diagnose load/discovery in CI
          GF_LOG_LEVEL: debug
          GF_LOG_FILTERS: "plugins=debug plugins.*=debug plugin.*=debug"
          # Enable anonymous admin so we can query the API without credentials in CI
          GF_AUTH_ANONYMOUS_ENABLED: "true"
          GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
          GF_AUTH_BASIC_ENABLED: "false"
        # Deterministic container name + healthcheck for readiness
        options: >-
          --name miradorstack-integration-grafana
          --health-cmd "wget -qO- http://localhost:3000/login >/dev/null || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go (for backend plugin builds)
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Mage
        run: go install github.com/magefile/mage@latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Stronger Playwright cache key
      - name: Cache Playwright binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-chromium-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      # Build frontend (TS) and then backend (Go) for both plugins
      - name: Build and prepare plugins
        run: |
          set -e
          # App plugin: build frontend first, then backend to avoid binary being wiped by clean tasks
          cd app
          npm ci
          npm run build
          mage -v || $HOME/go/bin/mage -v
          # Datasource plugin: same order
          cd ../datasource
          npm ci
          npm run build
          mage -v || $HOME/go/bin/mage -v

      - name: Verify build artifacts exist (diagnostics)
        run: |
          set -e
          echo "Listing app/dist:" && ls -la app/dist || true
          echo "Listing datasource/dist:" && ls -la datasource/dist || true
          test -f app/dist/plugin.json || (echo "app/dist/plugin.json missing" && exit 1)
          test -f datasource/dist/plugin.json || (echo "datasource/dist/plugin.json missing" && exit 1)
          # Expect backend executables per plugin.json 'executable' (allow platform-suffixed variants)
          ls -la app/dist | grep -E ' gpx_mirador_explorer($|_|\.)' || (echo "app backend executable missing" && exit 1)
          ls -la datasource/dist | grep -E ' gpx_mirador_core_connector($|_|\.)' || (echo "datasource backend executable missing" && exit 1)

      # Wait for Grafana to be healthy before interacting
      - name: Wait for Grafana to be healthy
        run: |
          for i in {1..60}; do
            status=$(docker inspect -f '{{.State.Health.Status}}' miradorstack-integration-grafana || echo "unknown")
            if [ "$status" = "healthy" ]; then
              echo "Grafana is healthy"
              exit 0
            fi
            sleep 2
          done
          echo "Grafana did not become healthy in time"
          docker logs miradorstack-integration-grafana
          exit 1
        
      - name: Copy plugins to Grafana
        run: |
          set -e
          docker exec miradorstack-integration-grafana mkdir -p /var/lib/grafana/plugins/miradorstack-miradorexplorer-app
          docker exec miradorstack-integration-grafana mkdir -p /var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource
          # Copy entire dist to preserve assets & frontend bundle
          docker cp app/dist/. miradorstack-integration-grafana:/var/lib/grafana/plugins/miradorstack-miradorexplorer-app/
          docker cp datasource/dist/. miradorstack-integration-grafana:/var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource/
          # Normalize backend binaries to Linux runner expectations (as root) and fix ownership
          docker exec -u 0 miradorstack-integration-grafana sh -lc 'cd /var/lib/grafana/plugins/miradorstack-miradorexplorer-app && if [ -f gpx_mirador_explorer_linux_amd64 ]; then mv -f gpx_mirador_explorer_linux_amd64 gpx_mirador_explorer; fi && [ -f gpx_mirador_explorer ] && chmod 0755 gpx_mirador_explorer || true'
          docker exec -u 0 miradorstack-integration-grafana sh -lc 'cd /var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource && if [ -f gpx_mirador_core_connector_linux_amd64 ]; then mv -f gpx_mirador_core_connector_linux_amd64 gpx_mirador_core_connector; fi && [ -f gpx_mirador_core_connector ] && chmod 0755 gpx_mirador_core_connector || true'
          docker exec -u 0 miradorstack-integration-grafana sh -lc 'chown -R 472:472 /var/lib/grafana/plugins/miradorstack-miradorexplorer-app /var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource'
          docker restart miradorstack-integration-grafana

      - name: Wait for Grafana to be healthy after restart
        run: |
          for i in {1..60}; do
            status=$(docker inspect -f '{{.State.Health.Status}}' miradorstack-integration-grafana || echo "unknown")
            if [ "$status" = "healthy" ]; then
              echo "Grafana is healthy after restart"
              exit 0
            fi
            sleep 2
          done
          echo "Grafana did not become healthy after restart in time"
          docker logs miradorstack-integration-grafana | tail -n 500
          exit 1

      - name: List plugins inside Grafana (diagnostics)
        run: |
          sleep 3
          echo "=== Plugin directories ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins'
          echo "=== App plugin contents ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins/miradorstack-miradorexplorer-app || true'
          echo "=== Datasource plugin contents ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource || true'
          echo "=== Check plugin.json IDs ==="
          docker exec miradorstack-integration-grafana sh -lc 'grep -H "\"id\":" /var/lib/grafana/plugins/*/plugin.json || true'
          echo "=== Check environment ==="
          docker exec miradorstack-integration-grafana sh -lc 'env | grep -i plugin || true'

      - name: Force plugin rescan and check logs
        run: |
          echo "=== Sending SIGHUP to force plugin rescan ==="
          docker exec miradorstack-integration-grafana sh -lc 'pkill -HUP grafana || kill -HUP 1 || true'
          sleep 5
          echo "=== Recent plugin-related logs ==="
          docker logs miradorstack-integration-grafana 2>&1 | grep -i plugin | tail -n 20 || echo "No plugin logs found"
          
      - name: Verify plugins are loaded in Grafana
        run: |
          set -e
          ids="miradorstack-miradorexplorer-app miradorstack-miradorcoreconnector-datasource"
          for i in {1..60}; do
            json=$(curl -fsS http://admin:admin@localhost:3000/api/plugins || true)
            ok=1
            for id in $ids; do
              echo "$json" | grep -q "\"id\":\"$id\"" || ok=0
            done
            if [ "$ok" = "1" ]; then
              echo "All plugins loaded"
              exit 0
            fi
            sleep 2
          done
          echo "Plugins did not load in time"
          docker logs miradorstack-integration-grafana | tail -n 500
          exit 1

      - name: Run E2E tests (app)
        working-directory: ./app
        env:
          GRAFANA_BASE_URL: http://admin:admin@localhost:3000
        run: npm run e2e

      - name: Run E2E tests (datasource)
        working-directory: ./datasource
        env:
          GRAFANA_BASE_URL: http://admin:admin@localhost:3000
        run: npm run e2e
