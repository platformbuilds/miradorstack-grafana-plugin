name: Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run weekly on Sundays at 01:30 UTC

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Align with Grafana plugin matrix: Node >= 22, npm >= 11.5.1
      - name: Setup Node.js (TS analysis)
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1 (TS analysis)
        if: matrix.language == 'typescript'
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Reproducible installs only (no lockfile regen, no @latest)
      - name: Install app deps
        if: matrix.language == 'typescript'
        working-directory: ./app
        run: npm ci

      - name: Install datasource deps
        if: matrix.language == 'typescript'
        working-directory: ./datasource
        run: npm ci

      # Keep CodeQL focused on source; no TS builds in this job
      - name: Build Go
        if: matrix.language == 'go'
        run: |
          cd datasource
          go build ./...

  functionality-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze]
    
    steps:
      - name: Clean up dist directories
        run: |
          # Remove dist directories that may have restrictive permissions from previous runs
          sudo rm -rf app/dist datasource/dist || true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go (for backend plugin builds)
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Mage
        run: go install github.com/magefile/mage@latest

      - name: Verify Go setup
        run: |
          echo "Go version: $(go version)"
          echo "Go environment:"
          go env GOPATH GOROOT GOBIN
          echo "Mage location:"
          which mage || echo "mage not in PATH"
          ls -la $HOME/go/bin/mage || echo "mage not in $HOME/go/bin"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Stronger Playwright cache key
      - name: Cache Playwright binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-chromium-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      # Build frontend (TS) and then backend (Go) for both plugins FIRST
      - name: Build and prepare plugins
        run: |
          set -e
          echo "=== Verifying Go modules ==="
          echo "App plugin go.mod:"
          cd app && go mod tidy && go mod verify && cd ..
          echo "Datasource plugin go.mod:"
          cd datasource && go mod tidy && go mod verify && cd ..
          
          echo "=== Building app plugin ==="
          cd app
          echo "Installing dependencies..."
          npm ci 2>&1
          echo "Building frontend..."
          npm run build 2>&1
          echo "Building backend..."
          mage -v 2>&1 || $HOME/go/bin/mage -v 2>&1
          echo "Checking build output..."
          ls -la dist/ || (echo "ERROR: app/dist/ is empty or missing" && exit 1)
          test -f dist/plugin.json || (echo "ERROR: app/dist/plugin.json missing" && exit 1)
          echo "App plugin build successful"
          
          echo "=== Building datasource plugin ==="
          cd ../datasource
          echo "Installing dependencies..."
          npm ci 2>&1
          echo "Building frontend..."
          npm run build 2>&1
          echo "Building backend..."
          mage -v 2>&1 || $HOME/go/bin/mage -v 2>&1
          echo "Checking build output..."
          ls -la dist/ || (echo "ERROR: datasource/dist/ is empty or missing" && exit 1)
          test -f dist/plugin.json || (echo "ERROR: datasource/dist/plugin.json missing" && exit 1)
          echo "Datasource plugin build successful"

      - name: Fix dist directory permissions
        run: |
          # Ensure dist directories are accessible to the runner user
          sudo chown -R $USER:$USER app/dist datasource/dist || true
          chmod -R u+rwX app/dist datasource/dist || true

      - name: Verify build artifacts exist (diagnostics)
        run: |
          set -e
          echo "=== App plugin dist contents ==="
          ls -la app/dist || true
          echo "=== Datasource plugin dist contents ==="
          ls -la datasource/dist || true
          echo "=== Checking required files ==="
          test -f app/dist/plugin.json || (echo "ERROR: app/dist/plugin.json missing" && exit 1)
          test -f datasource/dist/plugin.json || (echo "ERROR: datasource/dist/plugin.json missing" && exit 1)
          echo "=== Checking backend executables ==="
          # Expect backend executables per plugin.json 'executable' (allow platform-suffixed variants)
          if ls -la app/dist | grep -q -E ' gpx_mirador_explorer($|_|\.)'; then
            echo "✓ App backend executable found"
          else
            echo "ERROR: app backend executable missing" && exit 1
          fi
          if ls -la datasource/dist | grep -q -E ' gpx_mirador_core_connector($|_|\.)'; then
            echo "✓ Datasource backend executable found"
          else
            echo "ERROR: datasource backend executable missing" && exit 1
          fi
          echo "=== Checking frontend bundles ==="
          if ls -la app/dist | grep -q "module.js"; then
            echo "✓ App frontend bundle found"
          else
            echo "ERROR: app frontend bundle missing" && exit 1
          fi
          if ls -la datasource/dist | grep -q "module.js"; then
            echo "✓ Datasource frontend bundle found"
          else
            echo "ERROR: datasource frontend bundle missing" && exit 1
          fi

      - name: Start Grafana with built plugins
        run: |
          echo "=== Starting Grafana container with volume mounts ==="
          docker run -d \
            --name miradorstack-integration-grafana \
            -p 3000:3000 \
            -v $(pwd)/app/dist:/var/lib/grafana/plugins/miradorstack-miradorexplorer-app \
            -v $(pwd)/datasource/dist:/var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource \
            -e GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS="miradorstack-miradorexplorer-app,miradorstack-miradorcoreconnector-datasource" \
            -e GF_LOG_LEVEL=debug \
            -e GF_LOG_FILTERS="plugins=debug plugins.*=debug plugin.*=debug" \
            -e GF_AUTH_ANONYMOUS_ENABLED="true" \
            -e GF_AUTH_ANONYMOUS_ORG_ROLE=Admin \
            -e GF_AUTH_BASIC_ENABLED="false" \
            --health-cmd "wget -qO- http://localhost:3000/login >/dev/null || exit 1" \
            --health-interval 5s \
            --health-timeout 3s \
            --health-retries 20 \
            grafana/grafana:12.2.0

      - name: Wait for Grafana to be healthy
        run: |
          for i in {1..60}; do
            status=$(docker inspect -f '{{.State.Health.Status}}' miradorstack-integration-grafana || echo "unknown")
            if [ "$status" = "healthy" ]; then
              echo "Grafana is healthy"
              exit 0
            fi
            sleep 2
          done
          echo "Grafana did not become healthy in time"
          docker logs miradorstack-integration-grafana
          exit 1

      - name: Verify plugins are mounted and accessible
        run: |
          sleep 3
          echo "=== Plugin directories ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins'
          echo "=== App plugin contents ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins/miradorstack-miradorexplorer-app || true'
          echo "=== Datasource plugin contents ==="
          docker exec miradorstack-integration-grafana sh -lc 'ls -la /var/lib/grafana/plugins/miradorstack-miradorcoreconnector-datasource || true'
          echo "=== Check plugin.json IDs ==="
          docker exec miradorstack-integration-grafana sh -lc 'grep -H "\"id\":" /var/lib/grafana/plugins/*/plugin.json || true'
          echo "=== Check environment ==="
          docker exec miradorstack-integration-grafana sh -lc 'env | grep -i plugin || true'
      - name: Clean up dist directories
        run: |
          rm -rf app/dist
          rm -rf datasource/dist

      - name: Verify plugins are loaded in Grafana
        run: |
          set -e
          ids="miradorstack-miradorexplorer-app miradorstack-miradorcoreconnector-datasource"
          for i in {1..60}; do
            json=$(curl -fsS http://admin:admin@localhost:3000/api/plugins || true)
            ok=1
            for id in $ids; do
              echo "$json" | grep -q "\"id\":\"$id\"" || ok=0
            done
            if [ "$ok" = "1" ]; then
              echo "All plugins loaded"
              exit 0
            fi
            sleep 2
          done
          echo "Plugins did not load in time"
          docker logs miradorstack-integration-grafana | tail -n 500
          exit 1

      - name: Run E2E tests (app)
        working-directory: ./app
        env:
          GRAFANA_BASE_URL: http://admin:admin@localhost:3000
        run: npm run e2e

      - name: Run E2E tests (datasource)
        working-directory: ./datasource
        env:
          GRAFANA_BASE_URL: http://admin:admin@localhost:3000
        run: npm run e2e
