name: Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run weekly on Sundays at 01:30 UTC

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Align with Grafana plugin matrix: Node >= 22, npm >= 11.5.1
      - name: Setup Node.js (TS analysis)
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1 (TS analysis)
        if: matrix.language == 'typescript'
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Reproducible installs only (no lockfile regen, no @latest)
      - name: Install app deps
        if: matrix.language == 'typescript'
        working-directory: ./app
        run: npm ci

      - name: Install datasource deps
        if: matrix.language == 'typescript'
        working-directory: ./datasource
        run: npm ci

      # Keep CodeQL focused on source; no TS builds in this job
      - name: Build Go
        if: matrix.language == 'go'
        run: |
          cd datasource
          go build ./...

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  functionality-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze, vulnerability-check]
    
    services:
      grafana:
        image: grafana/grafana:12.2.0   # Grafana >= 12.2.0 per matrix
        ports:
          - 3000:3000
        # Deterministic container name + healthcheck for readiness
        options: >-
          --name miradorstack-integration-grafana
          --health-cmd "wget -qO- http://localhost:3000/login >/dev/null || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Stronger Playwright cache key
      - name: Cache Playwright binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-chromium-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      # Build only where needed (here)
      - name: Build and prepare plugins
        run: |
          cd app
          npm ci
          npm run build
          cd ../datasource
          npm ci
          npm run build

      # Wait for Grafana to be healthy before interacting
      - name: Wait for Grafana to be healthy
        run: |
          for i in {1..60}; do
            status=$(docker inspect -f '{{.State.Health.Status}}' miradorstack-integration-grafana || echo "unknown")
            if [ "$status" = "healthy" ]; then
              echo "Grafana is healthy"
              exit 0
            fi
            sleep 2
          done
          echo "Grafana did not become healthy in time"
          docker logs miradorstack-integration-grafana
          exit 1
        
      - name: Copy plugins to Grafana
        run: |
          docker exec miradorstack-integration-grafana mkdir -p /var/lib/grafana/plugins/platformbuilds-miradorstack-app
          docker exec miradorstack-integration-grafana mkdir -p /var/lib/grafana/plugins/platformbuilds-miradorstack-datasource
          docker cp app/dist/. miradorstack-integration-grafana:/var/lib/grafana/plugins/platformbuilds-miradorstack-app/
          docker cp datasource/dist/. miradorstack-integration-grafana:/var/lib/grafana/plugins/platformbuilds-miradorstack-datasource/
          docker restart miradorstack-integration-grafana

      - name: Run E2E tests (app)
        working-directory: ./app
        env:
          GRAFANA_BASE_URL: http://localhost:3000
        run: npm run e2e

      - name: Run E2E tests (datasource)
        working-directory: ./datasource
        env:
          GRAFANA_BASE_URL: http://localhost:3000
        run: npm run e2e

  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    env:
      DC_VERSION: 12.1.0
      DC_DATA_DIR: ~/.cache/dependency-check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Go vulnerability scanning
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck on datasource
        run: |
          cd datasource
          govulncheck ./...

      # Node.js/TypeScript vulnerability scanning
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'   # Node.js >= 22.0.0
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            datasource/package-lock.json

      - name: Upgrade npm to >= 11.5.1
        run: |
          npm -v
          npm i -g npm@^11.5.1
          npm -v

      # Reproducible installs only
      - name: Install app dependencies
        working-directory: ./app
        run: npm ci

      - name: Install datasource dependencies
        working-directory: ./datasource
        run: npm ci
        
      - name: Run npm audit (app)
        working-directory: ./app
        run: npm audit --audit-level=high

      - name: Run npm audit (datasource)
        working-directory: ./datasource
        run: npm audit --audit-level=high

      # Additional TypeScript security scanning with OWASP Dependency-Check
      - name: Cache Dependency-Check installation
        id: cache-odc
        uses: actions/cache@v4
        with:
          path: dependency-check
          key: ${{ runner.os }}-dependency-check-${{ env.DC_VERSION }}

      - name: Download Dependency-Check
        if: steps.cache-odc.outputs.cache-hit != 'true'
        run: |
          wget "https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip"
          unzip dependency-check-${DC_VERSION}-release.zip
          rm dependency-check-${DC_VERSION}-release.zip

      - name: Cache Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ${{ env.DC_DATA_DIR }}
          key: ${{ runner.os }}-dependency-check-data-${{ env.DC_VERSION }}
          restore-keys: |
            ${{ runner.os }}-dependency-check-data-

      - name: Run Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          if [ -z "$NVD_API_KEY" ]; then
            echo "::error::NVD_API_KEY secret is not configured; unable to run dependency-check." >&2
            exit 1
          fi
          mkdir -p dependency-check-reports
          mkdir -p "$DC_DATA_DIR"
          ./dependency-check/bin/dependency-check.sh \
            --nvdApiKey "$NVD_API_KEY" \
            --data "$DC_DATA_DIR" \
            --disableOssIndex \
            --suppression dependency-check-suppressions.xml \
            --scan app --scan datasource \
            --format HTML --format JSON --prettyPrint \
            --failOnCVSS 7 \
            --out dependency-check-reports

      - name: Upload Dependency-Check reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: dependency-check-reports